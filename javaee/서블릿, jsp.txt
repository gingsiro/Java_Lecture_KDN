HTTP            ┌────────────── CGI ──────────────┐
	    요청							┌ Program┐
┌──┐ ----------> ┌──┐-----------------> │동적으로│ ----->┌────┐
│  │    응답     │  │					│HTML생성│	     │ DB │
└──┘ <---------- └──┘<-----------------	└────────┘ <-----└────┘
 client		     WebServer			  Container
(Browser)	    (html, 자원)	    (c, PHP, JavaServler)
		        └────────────── WAS ──────────────┘

HTTP (Hyper Text Transfer Protocol) 
1. 응답 후 연결 종료 - Stateless
   => Cookie(Client), Session(Server)으로 보완
2. Server Push가 안됨
   =>ActiveX, Applet, Silverlight


CGI (Common Gateway Interface)
Container, Engine 이라고 함
 => C, PHP, JavaServlet

out.print("<html><head><title> hello </title></head><body> ..."); 
으로 하던걸용이하게 해주는 기술이 나옴

ASP(Basic기반)    =>    JSP

WAS (Web Application Server)



┌─────────────┐
│ Web Content │<= Context : Web Application
└──────┬──────┘
	   │
	   ├[WEB-INF] : Class, xml 만 배치
	   │   ├[lib] : jar
	   │   ├[classes] : servlet, class
	   │   └web.xml : context 환경 설정

HTML과 JSP는 서비스 가능한 곳에 배치돼야함
1. 서버 error난 경우
	(1.1) xml 설정 오류
	(1.2) server가 중복 start된 경우
	(1.3) server port 오류 (8088, 8009, ...)
   		  server 정지없이 이클립스 종료시 간헐적 발생
   		  -> javaw.exe 프로세스에서 강제종료
2. WEB-INF 폴더 하위에 배치한 경우
3. 배포가 안된 경우
	(3.1) workspace\.metadata\.plugin\org.eclipse.wdt.server.core\tmp0\wtpwebapps\컨텍스트 에 배포가 안된경우
		  -> server내부 프로젝트 업로드된것을 제거 후 재실행
		  -> 경로 하위에 직접 배포

ASCII : 영어 대,소, 숫자, 특수기호를 1byte내 코드로 작성
+ 영어권에서 사용하는 특수기호 ISO-8859-1 => UTF-8

  ┌─────────────┐
  │   Servlet   │
  └──────┬──────┘
┌────────┴────────┐
│ Generic Servlet │
└────────┬────────┘
┌────────┴────────┐
│  HTTP  Servlet  │
└─────────────────┘

응답코드
200 : OK (응답이 된 경우)
300 : Redirect (응답을 직접하지 않고 다른 곳으로 전달)
400 : Client 요청 Error
	401 : 요청 데이터 오류
    	-> 필수 데이터를 전달받지 못한 경우
	404 : 요청 URL에 해당하는 페이지가 없는 경우
		-> HttpServlet 을 상속 받았는지 확인하기
	405 : 요청 방식(method)가 잘못 된 경우
    	-> get으로 요청했는데 post만 구현된경우
500 : Server Error 



HTTP Protocol은 기본 요청 방식(데이터 전송 방식)을 GET 방식으로 사용
1. 주소창에서 요청시
2. form양식에서 method방식을 생략시
3. <a href="">로 요청시
4. location.href='url'로 요청시
5. window.open()

요청 패킷
Header	http1.1, 메서드방식, url 
Body	
Tail	1/4패킷
로 구성

Get방식
Header(o), Body(x), Tail(x)
Query String - http1.1, 메서드방식, url?name=value
전송 데이터가 url창에 보인다.
256Byte로 고정

Post방식
Header(o), Body(o), Tail(x)
Query String - http1.1, 메서드방식, url
전송 데이터가 url창에 보이지 않는다.
전송 크기가 정해져있지 않다.



웹 요청과 응답 절차
		2. web.xml 들 전체를 탐색     4. new Instance	  6.Invoke:Thread
1. hello.do					  3. ClassLoading		5. init()		  7. service
┌──┐ ----------> ┌──┐-------------->┌──┐--->┌──┐----->┌──┐---->┌──┐----->┌──┐
│U1│             │  │				│  │	│  │	  │  │	   │  │	     │  │
└──┘             └──┘               └──┘    └──┘      └──┘     └──┘      └──┘
  └─<───────────────────────<───────────────────────<────────────────────<┘
  											8. Data Send
재요청 절차
		2. web.xml 들 전체를 탐색						  6.Invoke:Thread
1. hello.do		   ┌───>─────────────────>────────────────>─────┐	  7. service
┌──┐ ----------> ┌─┴┐               ┌──┐    ┌──┐      ┌──┐     ┌┴─┐----->┌──┐
│U2│             │  │				│  │	│  │	  │  │	   │  │	     │  │
└──┘             └──┘               └──┘    └──┘      └──┘     └──┘      └──┘
  └─<───────────────────────<───────────────────────<────────────────────<┘
											8. Data Send























