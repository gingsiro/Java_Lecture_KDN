─────────────────────────────────── 1일차 ───────────────────────────────────
HTTP            ┌────────────── CGI ──────────────┐
	    요청							┌ Program┐
┌──┐ ----------> ┌──┐-----------------> │동적으로│ ----->┌────┐
│  │    응답     │  │					│HTML생성│	     │ DB │
└──┘ <---------- └──┘<-----------------	└────────┘ <-----└────┘
 client		     WebServer			  Container
(Browser)	    (html, 자원)	    (c, PHP, JavaServler)
		        └────────────── WAS ──────────────┘

HTTP (Hyper Text Transfer Protocol) 
1. 응답 후 연결 종료 - Stateless
   => Cookie(Client), Session(Server)으로 보완
2. Server Push가 안됨
   =>ActiveX, Applet, Silverlight


CGI (Common Gateway Interface)
Container, Engine 이라고 함
 => C, PHP, JavaServlet

out.print("<html><head><title> hello </title></head><body> ..."); 
으로 하던걸용이하게 해주는 기술이 나옴

ASP(Basic기반)    =>    JSP

WAS (Web Application Server)



┌─────────────┐
│ Web Content │<= Context : Web Application
└──────┬──────┘
	   │
	   ├[WEB-INF] : Class, xml 만 배치
	   │   ├[lib] : jar
	   │   ├[classes] : servlet, class
	   │   └web.xml : context 환경 설정

HTML과 JSP는 서비스 가능한 곳에 배치돼야함
1. 서버 error난 경우
	(1.1) xml 설정 오류
	(1.2) server가 중복 start된 경우
	(1.3) server port 오류 (8088, 8009, ...)
   		  server 정지없이 이클립스 종료시 간헐적 발생
   		  -> javaw.exe 프로세스에서 강제종료
2. WEB-INF 폴더 하위에 배치한 경우
3. 배포가 안된 경우
	(3.1) workspace\.metadata\.plugin\org.eclipse.wdt.server.core\tmp0\wtpwebapps\컨텍스트 에 배포가 안된경우
		  -> server내부 프로젝트 업로드된것을 제거 후 재실행
		  -> 경로 하위에 직접 배포

ASCII : 영어 대,소, 숫자, 특수기호를 1byte내 코드로 작성
+ 영어권에서 사용하는 특수기호 ISO-8859-1 => UTF-8

  ┌─────────────┐
  │   Servlet   │
  └──────┬──────┘
┌────────┴────────┐
│ Generic Servlet │
└────────┬────────┘
┌────────┴────────┐
│  HTTP  Servlet  │
└─────────────────┘

응답코드
200 : OK (응답이 된 경우)
300 : Redirect (응답을 직접하지 않고 다른 곳으로 전달)
400 : Client 요청 Error
	401 : 요청 데이터 오류
    	-> 필수 데이터를 전달받지 못한 경우
	404 : 요청 URL에 해당하는 페이지가 없는 경우
		-> HttpServlet 을 상속 받았는지 확인하기
	405 : 요청 방식(method)가 잘못 된 경우
    	-> get으로 요청했는데 post만 구현된경우
500 : Server Error 



HTTP Protocol은 기본 요청 방식(데이터 전송 방식)을 GET 방식으로 사용
1. 주소창에서 요청시
2. form양식에서 method방식을 생략시
3. <a href="">로 요청시
4. location.href='url'로 요청시
5. window.open()

요청 패킷
Header	http1.1, 메서드방식, url 
Body	
Tail	1/4패킷
로 구성

Get방식
Header(o), Body(x), Tail(x)
Query String - http1.1, 메서드방식, url?name=value
전송 데이터가 url창에 보인다.
256Byte로 고정

Post방식
Header(o), Body(o), Tail(x)
Query String - http1.1, 메서드방식, url
전송 데이터가 url창에 보이지 않는다.
전송 크기가 정해져있지 않다.



웹 요청과 응답 절차
		2. web.xml 들 전체를 탐색     4. new Instance	  6.Invoke:Thread
1. hello.do					  3. ClassLoading		5. init()		  7. service
┌──┐ ----------> ┌──┐-------------->┌──┐--->┌──┐----->┌──┐---->┌──┐----->┌──┐
│U1│             │  │				│  │	│  │	  │  │	   │  │	     │  │
└──┘             └──┘               └──┘    └──┘      └──┘     └──┘      └──┘
  └─<───────────────────────<───────────────────────<────────────────────<┘
  											8. Data Send
재요청 절차
		2. web.xml 들 전체를 탐색						  6.Invoke:Thread
1. hello.do		   ┌───>─────────────────>────────────────>─────┐	  7. service
┌──┐ ----------> ┌─┴┐               ┌──┐    ┌──┐      ┌──┐     ┌┴─┐----->┌──┐
│U2│             │  │				│  │	│  │	  │  │	   │  │	     │  │
└──┘             └──┘               └──┘    └──┘      └──┘     └──┘      └──┘
  └─<───────────────────────<───────────────────────<────────────────────<┘
											8. Data Send

요청 데이터 추출

[Get, Post 전용]
public String getParameter(String name)
: 요청 데이터중 name에 해당하는 value '하나'를 문자열로 리턴
  해당 name에 데이터가 없으면 null 리턴
  
public String[] getParameterValues(String name)
: 요청 데이터중 name에 해당하는 value를 문자열 배열로 리턴
  해당 name에 데이터가 없으면 null 리턴

[Get 전용]
public String getQueryString()
: url의 ? 뒤에 있는 QueryString을 한번에추출하여 문자열로 리턴

[Post 전용]
public ServletInputStream getInputStream()
: 요청 패킷을 ServletInputStram을 통해 읽어온다.
  (파일 처리)
 ->html파일에서 enctype="multipart/form-data" 입력해줘야함

getQueryString 이 필요한 상황
셀렉트박스와 게시판으로 검색
제목 - jsp 검색
1페이지에 2번째글 선택
해당 게시글 화면으로 이동
글을 다 보고 목록으로 가고싶음
boardList.do 호출
?????? 그냥 호출하면 원래 검색했던 페이지로 가지 못함
# get 방식으로 게시글화면으로 이동하면 getQueryString을 갖고 있으면, 
  원래 검색했던 페이지로 이동하도록 코드 작성 가능
  이후 목록 이동 시 Query String을 같이 보내 이전 검색 페이지로 그대로 이동시킴
  
JSP 파일 만들기 > 이름입력 > Next > JSP Template > new HTML > HTML5문서로 변경

ServletContext
서블릿에 대한 모든 환경정보를 가지고 있는 녀석


─────────────────────────────────── 2일차 ───────────────────────────────────

client -> web.xml <-> Filter <-> HelloServlet
	hello.do		Encoding
					인증검사
					보안
					등등...

.do에 * (모든것)을 쓸때 앞에 슬래시 쓰지 않아도 됨 

doFilter(request, response)
지정된 경로에 연결된 다른 Filter나 Servlet으로 이동하는 기능



JSP

jsp -> .java -> 실행

주석
comment	  	<%-- 자바코드 --%>	: jsp -> .java 때 사라짐 
	 		<%// 자바코드 %>	: .java -> 실행 때 사라짐
코드
scriptlet 	<% 자바코드 %>		: jsp -> .java 때 코드가 _jspService() 바디에 추가
								  지역변수로 선언됨(jspService 메서드의 바디에 추가되니까)
expression	<%= 내용 %>			: out.print("내용");, 세미콜론 들어가면 안됨
	 						  	  _jspService()바디에 추가
declaration	<%! 속성, 메서드 선언 %> : 변하지 않는 값만 입력한다.
										재사용이 어렵다.
	 <%@ 페이지 import %>

servlet vs jsp
jsp 가 더 무겁다.
화면은 jsp 로 만들어주고
MVC 패턴에서
Model(service, dto, dao)은 Java로
View는 HTML과 JSP로
Controller는 Servlet으로 작성한다.

<%@ directive %>
	├ page		: JSP 페이지 환경설정
	├ include	: JSP, HTML, TXT 등의 페이지를 현재 페이지에 포함
	└ taglib	: 작성된 사용자 정의 태그를 사용하기 위해 등록

Page 지시자
language	: java외 다른언어 사용 불가, 생략 
extends		: jsp외 다른걸 상속받으면 기능 불가, 생략
import		: <%@ page import="com.kdn.model.domain.*, ..." %>
errorPage	: <%@ page errorPage = "errorHandle.jsp"%>
			  errorHandle.jsp
			  	<%@Page isErrorPage = "true" %> //Exception 내장 객체 사용
			  									  에러메세지를 얻어올 수 있음
			  	<%= exception = ~~ %>
			 위와 같은 형태로 errorPage 설정
			 throws 와 같은 방식으로 이해할 수 있음
			 ## ErrorPage로 이동 시 Forward 로 이동 됨!!!!

	 a.jsp 요청
 ┌──┐ ----> ┌─────────────────────────────┐
 └──┘   ┌───────┐  a.jsp		b.jsp	  │
client  │header	│->┌───────┐    ┌───────┐ │
		│body	│  │┌Redirect┐->│	    │ │
		│...	│  └│경로변경│  └───────┘ │
		└───────┘	└────────┘	 		  │
Request		│							  │
요청Packet	└─────────────────────────────┘

	 a.jsp 요청
 ┌──┐ ----> ┌─────────────────────────────┐
 └──┘   ┌───────┐  a.jsp		b.jsp	  │
client  │header	│  ┌───────┐    ┌───────┐ │
		│body	│---Forward---->│b.jsp  │ │
		│key	│  └───────┘    └───────┘ │
		│value	│						  │
Request	└───────┘						  │
임시저장소	└─────────────────────────────┘


scope : 저장 공간
	├ Request		(HTTPServletRequest)
	│	request가 유지되는 상황(forward로 페이지 이동한 상황)에서
	│	request에 정보를 저장해서 공유할 수 있다.
	├ Session		(HTTPSession)
	│	클라이언트가 서버에 처음 요청해서 브라우저를 종료할 때 까지
	│	session에 정보를 저장해서 공유 할 수 있다.
	└ Application	(ServletContext)
		서버가 로딩 되면서 context를 초기화 시킴 
		서버가 종료 되면서 context를 해제 시킴
		 => 서버가 로딩된 때부터 서버가 종료될 때 까지 
			context내의 모든 서블릿(jsp포함)이 정보를 공유할 수 있다.

 - public void setAttribute(String name, Object value) : name 값으로 value를 저장
 - public Object getAttribute(String name) : name에 해당하는 value를 추출
 - public void removeAttribute(String name) : name에 해당하는 value를 삭제


request와 세션의 차이
request : forward되는 두 페이지(servlet, jsp)간에만 공유
			요청에 대한 처리가 종료되면 폐기됨
			client의 요청 정보를 담고 있는 객체
session : 브라우저가 종료될 때까지 공유
			사용자의 상태 정보를 저장

##쿠키/세션##
쿠키정보는 항상 요청 패킷에 들어간다. 사용할지 안할지에 달린것

			was
 ┌──┐ ---->   ┌────────────────┬────────────┐
 └──┘   	  │				   │HTTPSession │
Client		  │				   │├JSessionID │ 음수쿠키발행
└Cookie		  └────────────────┴────────────┘
 └JSessionID   HTTPSession session = request.getSession();


JSessionID는 브라우저 종료되면 삭제
항상 처리가 모두 끝나고 나면 쿠키,세션을 삭제 해 주어야 한다. 
 
session 만료
1. 브라우저를 종료
	- 메모리에만 저장되는 JSESSIONID가 해제되어 만료됨
2. invalidate()
	- 새로운 JSESSIONID를 부여해 기존 session에 접근 불가되며 만료됨
3. setMaxInactiveInterval(int sec)
	- 비활성 대기시간동안 접근 없을 시 invalidate
4. web.xml에서 session-timeout을 설정
	- <session-config>
			<session-timeout>분</session-timeout>
	  </session-config>
	- 지정된 시간동안 해당 context전체에 해당 session 요청이 없을 시 invalidate 


forward 시 경로가 context로 변경되므로 
member/login.jsp
에 있는 경로 탐색자가 혼란이 있을 수 있다.
1. index.jsp 부터 시작해 기준경로를 context로만 준다.
	이후 모든 페이지를 포워드 한다.
2. context경로를 추출해 context를 기준으로 경로 설정


forward와 redirect
forward : request가 공유되므로
			scope에 저장된 데이터가 유지
			클라이언트의 요청 정보도 유지
			url은 유지됨
redirect : 새로운 request로 요청이 되므로
			scope에 저장된 데이터가 유지되지 않고
			클라이언트의 요청 정보도 유지되지 않고
			url은 변경


<%@ include file="url" %>
				  └─ url pattern은 X -> jsp 이런거 안됨
<jsp:include page="url | url-pattern"/>


## useBean
 - bean을 기본생성자로 생성
 - 지정한 scope( request | session | application )에 저장된 객체가 있으면
   추출하고 없으면 기본 생성자로 생성해서 저장
 형식]
  <jsp:useBean id="식별자" class="패키지를 포함한 클래스 이름"
  			  [scope='page|request|session|application']
  			  [type='super type'] />
	scope 생략 시 기본값 = page(jsp 페이지 내에서 공유 하는 pageContext)
	type 생략 시 기본값 = class와 동일
 ex)
 <jsp:useBean id="member" class="com.kdn.model.domain.Member"
 			  scope="session" />
 ==> <%@ page import="com.kdn.model.domain.Member" %>
 	 <% Member member = (Member) session.getAttribute("member");
 	 	if(member==null){
 	 		member = new Member();
 	 		session.setAttribute("member", member);
 	 	} %>
		// scope에 따라 session이냐 다른 스코프냐로 사용이 달라짐

 <jsp:setProperty name="useBean의 id" property="속성명" value="값"
 														param="form 양식의 이름" />
 ex)
 <jsp:setProperty name="member" property="name" param="name" />
 ==> member.setName(request.getParameter("name"));
 
 <jsp:setProperty name="useBean의 아이디" property="*" />
 : 모든 속성의 속성명으로 폼양식의 데이터를 추출해서
   request.getParameter("속성명") 속성에 설정 
 
 <jsp:setProperty name="member" property="*" />
 member.setName(request.getParameter("name"));
 member.setId(request.getParameter("id"));
 member.setPassword(request.getParameter("password"));
 member.setEmail(request.getParameter("email"));
 ...
 
 
 !!!! 퀴즈 !!!!
 useBean, 세션만료, jsp관련 스크립트들, forward/redirect
 
 
 ─────────────────────────────────── 3일차 ───────────────────────────────────
 
 시험에는 domain, dao, controller, 페이지 한두장 정도가 실기시험
 
 시험문제
 내장객체가 아닌것은?, 인것은?
 
EL 장점 
 <% String msg = (String)session.getAttribute("msg"); %>
 <%=msg %>
 ${msg}
 
jQuery = $()
EL	  
 

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 